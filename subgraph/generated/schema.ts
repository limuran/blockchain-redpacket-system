// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RedPackageEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedPackageEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedPackageEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RedPackageEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedPackageEntity | null {
    return changetype<RedPackageEntity | null>(
      store.get_in_block("RedPackageEntity", id)
    );
  }

  static load(id: string): RedPackageEntity | null {
    return changetype<RedPackageEntity | null>(
      store.get("RedPackageEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get remainingAmount(): BigInt {
    let value = this.get("remainingAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingAmount(value: BigInt) {
    this.set("remainingAmount", Value.fromBigInt(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get remainingCount(): BigInt {
    let value = this.get("remainingCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingCount(value: BigInt) {
    this.set("remainingCount", Value.fromBigInt(value));
  }

  get isEqual(): boolean {
    let value = this.get("isEqual");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isEqual(value: boolean) {
    this.set("isEqual", Value.fromBoolean(value));
  }

  get createTime(): BigInt {
    let value = this.get("createTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createTime(value: BigInt) {
    this.set("createTime", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get message(): string {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get grabRecords(): GrabRecordLoader {
    return new GrabRecordLoader(
      "RedPackageEntity",
      this.get("id")!.toString(),
      "grabRecords"
    );
  }
}

export class GrabRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrabRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GrabRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrabRecord", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GrabRecord | null {
    return changetype<GrabRecord | null>(store.get_in_block("GrabRecord", id));
  }

  static load(id: string): GrabRecord | null {
    return changetype<GrabRecord | null>(store.get("GrabRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redPackage(): string {
    let value = this.get("redPackage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redPackage(value: string) {
    this.set("redPackage", Value.fromString(value));
  }

  get grabber(): string {
    let value = this.get("grabber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set grabber(value: string) {
    this.set("grabber", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get createdRedPackagesCount(): BigInt {
    let value = this.get("createdRedPackagesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdRedPackagesCount(value: BigInt) {
    this.set("createdRedPackagesCount", Value.fromBigInt(value));
  }

  get grabbedRedPackagesCount(): BigInt {
    let value = this.get("grabbedRedPackagesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set grabbedRedPackagesCount(value: BigInt) {
    this.set("grabbedRedPackagesCount", Value.fromBigInt(value));
  }

  get totalAmountCreated(): BigInt {
    let value = this.get("totalAmountCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountCreated(value: BigInt) {
    this.set("totalAmountCreated", Value.fromBigInt(value));
  }

  get totalAmountGrabbed(): BigInt {
    let value = this.get("totalAmountGrabbed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountGrabbed(value: BigInt) {
    this.set("totalAmountGrabbed", Value.fromBigInt(value));
  }

  get createdRedPackages(): RedPackageEntityLoader {
    return new RedPackageEntityLoader(
      "User",
      this.get("id")!.toString(),
      "createdRedPackages"
    );
  }

  get grabRecords(): GrabRecordLoader {
    return new GrabRecordLoader(
      "User",
      this.get("id")!.toString(),
      "grabRecords"
    );
  }

  get firstRedPackageTime(): BigInt {
    let value = this.get("firstRedPackageTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstRedPackageTime(value: BigInt) {
    this.set("firstRedPackageTime", Value.fromBigInt(value));
  }

  get lastRedPackageTime(): BigInt {
    let value = this.get("lastRedPackageTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastRedPackageTime(value: BigInt) {
    this.set("lastRedPackageTime", Value.fromBigInt(value));
  }
}

export class RedPackageStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedPackageStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedPackageStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RedPackageStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedPackageStats | null {
    return changetype<RedPackageStats | null>(
      store.get_in_block("RedPackageStats", id)
    );
  }

  static load(id: string): RedPackageStats | null {
    return changetype<RedPackageStats | null>(store.get("RedPackageStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalRedPackages(): BigInt {
    let value = this.get("totalRedPackages");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRedPackages(value: BigInt) {
    this.set("totalRedPackages", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalAmountDistributed(): BigInt {
    let value = this.get("totalAmountDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountDistributed(value: BigInt) {
    this.set("totalAmountDistributed", Value.fromBigInt(value));
  }

  get totalGrabRecords(): BigInt {
    let value = this.get("totalGrabRecords");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGrabRecords(value: BigInt) {
    this.set("totalGrabRecords", Value.fromBigInt(value));
  }

  get equalRedPackagesCount(): BigInt {
    let value = this.get("equalRedPackagesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set equalRedPackagesCount(value: BigInt) {
    this.set("equalRedPackagesCount", Value.fromBigInt(value));
  }

  get randomRedPackagesCount(): BigInt {
    let value = this.get("randomRedPackagesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set randomRedPackagesCount(value: BigInt) {
    this.set("randomRedPackagesCount", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class DailyRedPackageStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyRedPackageStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyRedPackageStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyRedPackageStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyRedPackageStats | null {
    return changetype<DailyRedPackageStats | null>(
      store.get_in_block("DailyRedPackageStats", id)
    );
  }

  static load(id: string): DailyRedPackageStats | null {
    return changetype<DailyRedPackageStats | null>(
      store.get("DailyRedPackageStats", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get redPackagesCreated(): BigInt {
    let value = this.get("redPackagesCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set redPackagesCreated(value: BigInt) {
    this.set("redPackagesCreated", Value.fromBigInt(value));
  }

  get totalAmountCreated(): BigInt {
    let value = this.get("totalAmountCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountCreated(value: BigInt) {
    this.set("totalAmountCreated", Value.fromBigInt(value));
  }

  get grabRecordsCount(): BigInt {
    let value = this.get("grabRecordsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set grabRecordsCount(value: BigInt) {
    this.set("grabRecordsCount", Value.fromBigInt(value));
  }

  get totalAmountGrabbed(): BigInt {
    let value = this.get("totalAmountGrabbed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountGrabbed(value: BigInt) {
    this.set("totalAmountGrabbed", Value.fromBigInt(value));
  }

  get newUsers(): BigInt {
    let value = this.get("newUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newUsers(value: BigInt) {
    this.set("newUsers", Value.fromBigInt(value));
  }
}

export class RefundRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RefundRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RefundRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RefundRecord", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RefundRecord | null {
    return changetype<RefundRecord | null>(
      store.get_in_block("RefundRecord", id)
    );
  }

  static load(id: string): RefundRecord | null {
    return changetype<RefundRecord | null>(store.get("RefundRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redPackage(): string {
    let value = this.get("redPackage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redPackage(value: string) {
    this.set("redPackage", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get refundAmount(): BigInt {
    let value = this.get("refundAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set refundAmount(value: BigInt) {
    this.set("refundAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GrabRecordLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): GrabRecord[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<GrabRecord[]>(value);
  }
}

export class RedPackageEntityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RedPackageEntity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RedPackageEntity[]>(value);
  }
}
