// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RedPackageCreated extends ethereum.Event {
  get params(): RedPackageCreated__Params {
    return new RedPackageCreated__Params(this);
  }
}

export class RedPackageCreated__Params {
  _event: RedPackageCreated;

  constructor(event: RedPackageCreated) {
    this._event = event;
  }

  get redPackageId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get count(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isEqual(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get message(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class RedPackageGrabbed extends ethereum.Event {
  get params(): RedPackageGrabbed__Params {
    return new RedPackageGrabbed__Params(this);
  }
}

export class RedPackageGrabbed__Params {
  _event: RedPackageGrabbed;

  constructor(event: RedPackageGrabbed) {
    this._event = event;
  }

  get redPackageId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get grabber(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remainingCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get remainingAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RedPackageCompleted extends ethereum.Event {
  get params(): RedPackageCompleted__Params {
    return new RedPackageCompleted__Params(this);
  }
}

export class RedPackageCompleted__Params {
  _event: RedPackageCompleted;

  constructor(event: RedPackageCompleted) {
    this._event = event;
  }

  get redPackageId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalGrabbed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedPackageRefunded extends ethereum.Event {
  get params(): RedPackageRefunded__Params {
    return new RedPackageRefunded__Params(this);
  }
}

export class RedPackageRefunded__Params {
  _event: RedPackageRefunded;

  constructor(event: RedPackageRefunded) {
    this._event = event;
  }

  get redPackageId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get refundAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedPackage__getRedPackageInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;
  value7: boolean;
  value8: string;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
    value7: boolean,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getTotalAmount(): BigInt {
    return this.value1;
  }

  getRemainingAmount(): BigInt {
    return this.value2;
  }

  getTotalCount(): BigInt {
    return this.value3;
  }

  getRemainingCount(): BigInt {
    return this.value4;
  }

  getIsEqual(): boolean {
    return this.value5;
  }

  getCreateTime(): BigInt {
    return this.value6;
  }

  getIsActive(): boolean {
    return this.value7;
  }

  getMessage(): string {
    return this.value8;
  }
}

export class RedPackage__getGrabRecordsResultValue0Struct extends ethereum.Tuple {
  get grabber(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class RedPackage extends ethereum.SmartContract {
  static bind(address: Address): RedPackage {
    return new RedPackage("RedPackage", address);
  }

  getRedPackageInfo(
    _redPackageId: BigInt
  ): RedPackage__getRedPackageInfoResult {
    let result = super.call(
      "getRedPackageInfo",
      "getRedPackageInfo(uint256):(address,uint256,uint256,uint256,uint256,bool,uint256,bool,string)",
      [ethereum.Value.fromUnsignedBigInt(_redPackageId)]
    );

    return new RedPackage__getRedPackageInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toString()
    );
  }

  try_getRedPackageInfo(
    _redPackageId: BigInt
  ): ethereum.CallResult<RedPackage__getRedPackageInfoResult> {
    let result = super.tryCall(
      "getRedPackageInfo",
      "getRedPackageInfo(uint256):(address,uint256,uint256,uint256,uint256,bool,uint256,bool,string)",
      [ethereum.Value.fromUnsignedBigInt(_redPackageId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RedPackage__getRedPackageInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toString()
      )
    );
  }

  getGrabRecords(
    _redPackageId: BigInt
  ): Array<RedPackage__getGrabRecordsResultValue0Struct> {
    let result = super.call(
      "getGrabRecords",
      "getGrabRecords(uint256):((address,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_redPackageId)]
    );

    return result[0].toTupleArray<
      RedPackage__getGrabRecordsResultValue0Struct
    >();
  }

  try_getGrabRecords(
    _redPackageId: BigInt
  ): ethereum.CallResult<Array<RedPackage__getGrabRecordsResultValue0Struct>> {
    let result = super.tryCall(
      "getGrabRecords",
      "getGrabRecords(uint256):((address,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_redPackageId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<RedPackage__getGrabRecordsResultValue0Struct>()
    );
  }

  hasUserGrabbed(_redPackageId: BigInt, _user: Address): boolean {
    let result = super.call(
      "hasUserGrabbed",
      "hasUserGrabbed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_redPackageId),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasUserGrabbed(
    _redPackageId: BigInt,
    _user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserGrabbed",
      "hasUserGrabbed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_redPackageId),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextRedPackageId(): BigInt {
    let result = super.call(
      "nextRedPackageId",
      "nextRedPackageId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextRedPackageId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextRedPackageId",
      "nextRedPackageId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateRedPackageCall extends ethereum.Call {
  get inputs(): CreateRedPackageCall__Inputs {
    return new CreateRedPackageCall__Inputs(this);
  }

  get outputs(): CreateRedPackageCall__Outputs {
    return new CreateRedPackageCall__Outputs(this);
  }
}

export class CreateRedPackageCall__Inputs {
  _call: CreateRedPackageCall;

  constructor(call: CreateRedPackageCall) {
    this._call = call;
  }

  get _count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isEqual(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _message(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateRedPackageCall__Outputs {
  _call: CreateRedPackageCall;

  constructor(call: CreateRedPackageCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrabRedPackageCall extends ethereum.Call {
  get inputs(): GrabRedPackageCall__Inputs {
    return new GrabRedPackageCall__Inputs(this);
  }

  get outputs(): GrabRedPackageCall__Outputs {
    return new GrabRedPackageCall__Outputs(this);
  }
}

export class GrabRedPackageCall__Inputs {
  _call: GrabRedPackageCall;

  constructor(call: GrabRedPackageCall) {
    this._call = call;
  }

  get _redPackageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GrabRedPackageCall__Outputs {
  _call: GrabRedPackageCall;

  constructor(call: GrabRedPackageCall) {
    this._call = call;
  }
}

export class RefundRedPackageCall extends ethereum.Call {
  get inputs(): RefundRedPackageCall__Inputs {
    return new RefundRedPackageCall__Inputs(this);
  }

  get outputs(): RefundRedPackageCall__Outputs {
    return new RefundRedPackageCall__Outputs(this);
  }
}

export class RefundRedPackageCall__Inputs {
  _call: RefundRedPackageCall;

  constructor(call: RefundRedPackageCall) {
    this._call = call;
  }

  get _redPackageId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundRedPackageCall__Outputs {
  _call: RefundRedPackageCall;

  constructor(call: RefundRedPackageCall) {
    this._call = call;
  }
}
